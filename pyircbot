#!/usr/bin/python
# coding: iso-8859-15

"""
pyircbot2 - Bot pythoniano de IRC, Feb'07, by qat.
Parte del codigo 'pillado' de un texto de o'Reilly:
   http://www.oreilly.com/pub/h/1968
Public License.

----------
Changelog:
----------

21 Mar'07 - Bug#3. sleep() para controlar flood urls. No, no recuerdo los 2 anteriores.

27 Feb'07 - Adición funcionalidad grabar quotes.
          - Adición funcionalidad mostrar X últimas urls.

Mediados de Feb'07 - Script principal.

"""

import socket,os,string,sys,linecache,random,time

### VARIABLES ###
DEBUG = 0 # <- sin debug info
NICK = "jirili" # <- nick del bot
USER = "jirili localhost libres.irc-hispano.org :jirili"
CHANNEL = "#tty" # <- canal al que se asocia
readbuffer = ""
SERVICIOS = "acerca de, ayuda, quit, quote [add], saluda, url [number]"
QUITPWD = "tarariro" # <- pass para chaparlo

### METAFUNCIONES ###
def isInt(str):
   """Is the given string an integer?"""
   try:int(str)
   except ValueError:return 0
   else:return 1

### FUNCIONES ###
def espia_url(line):
   if(line.find("PRIVMSG "+CHANNEL) != -1):
      list = line.split(' ')
      for i in list:
         if((i.find('http:') != -1) or (i.find('ftp:')) != -1):
	    fp = open('/home/jors/.pyircbot2/urls.txt', 'a')
	    fp.write(i+'\n')
	    fp.close()
	    break

def lee_urls(line):
   # Lee y muestra las urls almacenadas.
   list = line.split('url')
   fp = open('/home/jors/.pyircbot2/urls.txt', 'r')
   lines = fp.readlines() # lines es una list de urls
   fp.close()
   if(list[1] == ''):
      for i in lines:
         s.send("PRIVMSG %s :%s\r\n" % (CHANNEL,i))
	 time.sleep(1) # Bug#3.
   elif(isInt(list[1])):
      req_urls = int(list[1]) # requested urls
      avail_urls = int(len(lines)) # available urls
      if(req_urls <= avail_urls):
         url_start = avail_urls - req_urls
	 lines = lines[url_start:avail_urls] # seleccionamos un rango de elementos, elem inicial:final
	 for i in lines:
	    s.send("PRIVMSG %s :%s\r\n" % (CHANNEL,i))
	    time.sleep(1) # Bug#3.
      else:
         s.send("PRIVMSG %s :Petición fuera de rango! Sólo hay %s urls!\r\n" % (CHANNEL,len(lines)))
   else:
      s.send("PRIVMSG %s :El parámetro no es un entero!\r\n" % (CHANNEL))

def anyade_quote(line):
   list = line.split('quote add')
   if(list[1] != ''):
      fp = open('/home/jors/.pyircbot2/quotes.txt', 'a')
      fp.write(list[1]+'\n')
      fp.close()
      s.send("PRIVMSG %s :Quote añadido! \r\n" % (CHANNEL))
   else:
      s.send("PRIVMSG %s :Debes especificar una cadena como quote! \r\n" % (CHANNEL))

def lee_quote():
   # Leer una random quote.
   fp = open('/home/jors/.pyircbot2/quotes.txt', 'r')
   lines = fp.readlines() # lines es una list de quotes
   fp.close()
   elems = len(lines)
   rand_num = random.randint(0,elems-1)
   s.send("PRIVMSG %s :%s\r\n" % (CHANNEL,lines[rand_num]))

def salir(line):
   if(line.find(QUITPWD) != -1):
      s.send("PRIVMSG %s :Chao!\r\n" % CHANNEL)
      #s.close();
      sys.exit(1)
   else:
      s.send("PRIVMSG %s :Reservado a los privilegiados.\r\n" % CHANNEL)

def mostrar_salida(s):
   recvd = s.recv(4096)
   if DEBUG == 1:
      print "Recibido: "+recvd

def mandar_pong(s):
   recvd = s.recv(4096)
   recvd = recvd.replace("PING", "PONG")
   s.send(recvd+'\r\n')

### MAIN ###

# Create socket & connect to IRC server.
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#print 'Connecting to server...'
s.connect(('libres.irc-hispano.org', 6667))

# Mandamos datos iniciales...
if(DEBUG):
   print 'Sending NICK...'
s.send('NICK %s\r\n' % NICK)
mostrar_salida(s)
mandar_pong(s)

if(DEBUG):
   print 'Sending USER...'
s.send('USER %s\r\n' % USER)
mostrar_salida(s)

if(DEBUG):
   print 'Sending JOIN...'
s.send('JOIN %s\r\n' % CHANNEL)
mostrar_salida(s)

while 1:

   """
   Reads a maximum of 1024 bytes from the server and appends it
   to the readbuffer. You need a readbuffer because you might 
   not always be able to read complete IRC commands from the server.
   """
   readbuffer=readbuffer+s.recv(1024)
   # En temp tenemos el mogollon sin el \n.
   temp=string.split(readbuffer, "\n")
   """
   The read buffer is then split into a list of strings, using \n
   as a separator. The last line in this list is possibly a 
   half-received line, so it is stored back into the read buffer.
   """
   readbuffer=temp.pop()

   for line in temp:
      """
      Before we're able to process the lines from the read buffer
      in a normal manner, there's one thing left to do. You need
      to remove the trailing \r character from the end of the lines.
      """
      line=string.rstrip(line)
      line_list=string.split(line)
      
      if(line_list[0]=='PING'):
         if(DEBUG):
            print 'PING received, sending PONG...'
         s.send("PONG %s\r\n" % line_list[1])
    
      # ayuda #
      elif(line.find(NICK+': ayuda') != -1):
         s.send("PRIVMSG %s :Uso: %s: servicio\r\n" % (CHANNEL,NICK))
	 s.send("PRIVMSG %s :Lista de servicios: %s\r\n" % (CHANNEL,SERVICIOS))

      # saluda #
      elif(line.find(NICK+': saluda') != -1):
         elems = len(line_list)
         if(line_list[elems-1] == 'saluda'):
	    s.send("PRIVMSG %s :Hola!\r\n" % CHANNEL)
	 else:
            s.send("PRIVMSG %s :Hola %s\r\n" % (CHANNEL,line_list[elems-1]))

      # quote: leer/añadir #
      elif(line.find(NICK+': quote') != -1):
         if(line.find(NICK+': quote add') != -1):
	    anyade_quote(line)
	 else:
            lee_quote()

      # url #
      elif(line.find(NICK+': url') != -1):
         lee_urls(line)

      # acerca de #
      elif(line.find(NICK+': acerca de') != -1):
         MSG = 'pyircbot2 - Bot pythoniano de IRC, Feb\'07, by qat.'
         s.send("PRIVMSG %s :%s\r\n" % (CHANNEL,MSG))

      # url catcher #
      if((line.find('http:') != -1) or (line.find('ftp:') != -1)):
         espia_url(line)

      # quit #
      if(line.find(NICK+ ': quit') != -1):
         salir(line)

